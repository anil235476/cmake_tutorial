commenting:-
   line starting with # is commenting

cmake version mentioning:-
	cmake_minimum_required (VERSION numberhere)
project name 
		project(project_name)
defining type of application
		as exe:-
			add_executable(name list of files here)
		as library:-
		    static library(default setting is STATIC)
			add_library(name STATIC "list of files here")
			dynamic library
			add_library(name SHARED "list of files here")
		
Adding compile time Flag:-
		//let us say we want add compile time flag with name TEST 
		add_definitions(-DTEST)

linking one exe to library:-
        //test -> exe name 
		//testlib --> library name
		target_link_libraries(test testlib)

setting normal variable, enviornment varible, or cache variable:-
		set(<variable> <value>... [PARENT_SCOPE])
		//what is the use of set(...)
		a. setting list of files to variable.
		
How to access variable value:-
		${variable_name}
		
adding standard library say windows specific:-
         //here we try to add d3d11.lib file
		target_link_libraries(directX_renderer d3d11)
		//note: it is case sensitive, if D3D11 is given then there would be compilation error
		
directory path of project:-
         ${CMAKE_HOME_DIRECTORY} -- > identifies the project directory path
		 
deciding binary exe and obj file directory:-
          CMAKE_RUNTIME_OUTPUT_DIRECTORY this flag represents directory.
		  whatever path we want to give to output directory, this variable value hs to be set.
		  for example
		  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin/)
		  
deciding library out put directory:-
	For shared library:-
        CMAKE_LIBRARY_OUTPUT_DIRECTORY represents library output directory.
		whatever output directory is required, set this variable as desired value of directory.
		for example:-
		set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin/) 
		can be done as 
		set_target_properties(bit_blt_capturer PROPERTIES
         LIBRARY_OUTPUT_DIRECTORY  ${CMAKE_HOME_DIRECTORY}/bin/
		 )
		 
	for static librarie
		set_target_properties(bit_blt_capturer PROPERTIES
         ARCHIVE_OUTPUT_DIRECTORY  ${CMAKE_HOME_DIRECTORY}/bin/
		 )
		
		
adding subdirectory in the build:-
		add_subdirectory((source_dir)
		Add a subdirectory to the build. 
		The source_dir specifies the directory in which the source CMakeLists.txt and code files are located.
		
how to specify target platform:-(x86 or x64)
			by default cmake generate build for x86.
			however for other than x86,this has to be put into command line argument when cmake is run
			for example:-
			cmake .\ -G "Visual Studio 14 2015 Win64"
			explanation:- in this case build is generated for Visual Studio 14 2015 with x64 archietuecture support.

how to make conditional inclusion(selection) in cmake run enviornment:-
			use case:-
					When it is required to ON of some cmake part.
			option(variable_name, " comment ", [initial value])
			option variable can have ON or OFF.
			to set variable:-
			during running cmake from command line 
			cmake -Dvariable_name=ON[or OFF]
			
adding testing framework along with gtest:-
			--> download googletest source code as one of the subdirectory
			--> decide a flag which will build unit test frame work let say it "test"
			-->
			   in main CMakeList.txt file 
			   add google framework subdirectory 
			     ####################################
				#GTest
					#####################################
				if(test)
				add_subdirectory(gTest)
				endif(test)
				
			---> in test subdirectory 
			     in test's main cmakeLists.txt file
				 
				 if(test)
					enable_testing()
					include_directories(
						${gtest_SOURCE_DIR}/include 
						${gtest_SOURCE_DIR}
					)
					
				add_executable(run_unit_test
							test_gtest.cxx)
				target_link_libraries(run_unit_test
							gtest gtest_main
				)
				target_link_libraries(run_unit_test
					app_lib
					)
			add_test(our_test run_unit_test)
			
		>> how to run test:-
		   go to build subdirectroy of test and in 
		     command line run ctest 
			   this will run all the test defined for our_test above
				 
		
			
			References:-
	https://cmake.org/cmake/help/v3.0/

Building
	CMake supports out-of-source builds?—?so all our compiled code goes into a directory separate to the sources.
	mkdir _build
	cd _build
	cmake ..
	
List of cmake global variables:-
	(a) CMAKE_BINARY_DIR
			if you are building in-source, this is the same as CMAKE_SOURCE_DIR, otherwise this is the top level directory of your build tree
	(b) CMAKE_SOURCE_DIR
			this is the directory, from which cmake was started, i.e. the top level source directory
	(c) EXECUTABLE_OUTPUT_PATH
			set this variable to specify a common place where CMake should put all executable files (instead of CMAKE_CURRENT_BINARY_DIR)
	(d) LIBRARY_OUTPUT_PATH
			set this variable to specify a common place where CMake should put all libraries (instead of CMAKE_CURRENT_BINARY_DIR)
	(e) PROJECT_NAME
			the name of the project set by PROJECT() command.
	(f) PROJECT_SOURCE_DIR
			ontains the full path to the root of your project source directory, i.e. to the nearest directory where CMakeLists.txt contains the PROJECT() command.
			
how to add include directory path	
	include_directories(path_to_include)
	
how to include library path:-
	LINK_DIRECTORIES(path_to_include)
	
Using Differnt Generator
    If we want to use a differnt generator, we pass it to cmake using the -G parameter:-
	example :- cmake -G Xcode

make depend a project  
	add_dependencies()
	  

			